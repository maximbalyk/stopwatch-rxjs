{"version":3,"sources":["components/Buttons.tsx","components/Display.tsx","components/Stopwatch.tsx","App.tsx","index.tsx"],"names":["Buttons","handleStartStopButton","emitWaitEvent","handleResetButton","className","type","onClick","Display","timerArray","Stopwatch","useState","timeInSeconds","setTimeInSeconds","setTimerArray","intervalId","setIntervalId","running","setRunning","Subject","waitSubject","useEffect","timeArray","time","hours","Math","floor","minutes","seconds","calculateTimer","pipe","map","Date","getTime","bufferCount","filter","timestamps","subscribe","clearInterval","interval","setInterval","previousState","next","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAQaA,EAA2B,SAAC,GAIlC,IAHLC,EAGI,EAHJA,sBACAC,EAEI,EAFJA,cACAC,EACI,EADJA,kBAEA,OACE,sBAAKC,UAAU,gCAAf,UACE,wBACEC,KAAK,SACLC,QAASL,EACTG,UAAU,uBAHZ,wBAOA,wBACEC,KAAK,SACLC,QAASJ,EACTE,UAAU,4BAHZ,kBAOA,wBACEC,KAAK,SACLC,QAASH,EACTC,UAAU,uBAHZ,uBCvBOG,EAA2B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACzC,OACE,0BAASJ,UAAU,0CAAnB,UACE,4BAAII,EAAW,KACf,qCACA,4BAAIA,EAAW,KACf,qCACA,4BAAIA,EAAW,SCoFNC,EA1Fa,WAC1B,MAA0CC,mBAAiB,GAA3D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAiC,IAArE,mBAAOF,EAAP,KAAmBK,EAAnB,KACA,EAAoCH,mBAAiB,GAArD,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA8BL,oBAAkB,GAAhD,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAsBP,mBAA2B,IAAIQ,KAA9CC,EAAP,oBAsCAC,qBAAU,WACR,IAAMC,EArCe,SAACC,GACtB,IAAMC,EAAQC,KAAKC,MAAMH,EAAO,MAC1BI,EAAUF,KAAKC,OAAOH,EAAgB,KAARC,GAAiB,IAC/CI,EAAUL,EAAgB,KAARC,EAA2B,GAAVG,EAMzC,MAAO,CAJaH,EAAQ,GAAR,WAAiBA,GAAUA,EACzBG,EAAU,GAAV,WAAmBA,GAAYA,EAC/BC,EAAU,GAAV,WAAmBA,GAAYA,GA8BXC,CAAejB,GAjBzDQ,EAAYU,KACVC,aAAI,kBAAM,IAAIC,MAAOC,aACrBC,YALiB,EAKO,GACxBC,aAAO,SAACC,GACN,OAAOA,EAAW,IAAK,IAAIJ,MAAOC,UANnB,QAQjBI,WAAU,WACVC,cAAcvB,GACdG,GAAYD,MAadH,EAAcQ,KACb,CAACV,IA6BJ,OACE,qCACE,cAAC,EAAD,CAASH,WAAYA,IACrB,cAAC,EAAD,CACEP,sBA/BwB,WAC5B,GAAKe,EAOHqB,cAAcvB,GACdF,EAAiB,OARL,CACZ,IAAM0B,EAAgBC,aAAY,WAChC3B,GAAiB,SAAC4B,GAAD,OAAmBA,EAAgB,OACnD,KAEHzB,EAAcuB,GAMhBrB,GAAYD,IAoBRd,cA5CgB,WACpBiB,EAAYsB,MAAK,IA4CbtC,kBAlBoB,WACxB,GAAIa,EAAS,CACXqB,cAAcvB,GACdF,EAAiB,GACjB,IAAM0B,EAAgBC,aAAY,WAChC3B,GAAiB,SAAC4B,GAAD,OAAmBA,EAAgB,OACnD,KAEHzB,EAAcuB,WC5EPI,EAAgB,WAC3B,OACE,qBAAKtC,UAAU,UAAf,SACE,cAAC,EAAD,OCHNuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2d985967.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  handleStartStopButton: () => void;\n  emitWaitEvent: () => void;\n  handleResetButton: () => void;\n}\n\nexport const Buttons: React.FC<Props> = ({\n  handleStartStopButton,\n  emitWaitEvent,\n  handleResetButton,\n}) => {\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <button\n        type=\"button\"\n        onClick={handleStartStopButton}\n        className=\"btn btn-outline-dark\"\n      >\n        Start/Stop\n      </button>\n      <button\n        type=\"button\"\n        onClick={emitWaitEvent}\n        className=\"btn btn-outline-dark mx-2\"\n      >\n        Wait\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleResetButton}\n        className=\"btn btn-outline-dark\"\n      >\n        Reset\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  timerArray: Array<number | string>;\n}\n\nexport const Display: React.FC<Props> = ({ timerArray }) => {\n  return (\n    <section className=\"d-flex justify-content-center display-3\">\n      <p>{timerArray[0]}</p>\n      <span>:</span>\n      <p>{timerArray[1]}</p>\n      <span>:</span>\n      <p>{timerArray[2]}</p>\n    </section>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Subject, map, bufferCount, filter,\n} from 'rxjs';\nimport { Buttons } from './Buttons';\nimport { Display } from './Display';\n\nconst Stopwatch: React.FC = () => {\n  const [timeInSeconds, setTimeInSeconds] = useState<number>(0);\n  const [timerArray, setTimerArray] = useState<Array<number | string>>([]);\n  const [intervalId, setIntervalId] = useState<number>(0);\n  const [running, setRunning] = useState<boolean>(false);\n  const [waitSubject] = useState<Subject<boolean>>(new Subject());\n\n  const calculateTimer = (time: number): Array<number | string> => {\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor((time - (hours * 3600)) / 60);\n    const seconds = time - (hours * 3600) - (minutes * 60);\n\n    const hoursFormat = hours < 10 ? `0${hours}` : hours;\n    const minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\n    const secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\n\n    return [\n      hoursFormat,\n      minutesFormat,\n      secondsFormat,\n    ];\n  };\n\n  const handleWaitClick = () => {\n    const clickCount = 2;\n    const clickDelay = 300;\n\n    waitSubject.pipe(\n      map(() => new Date().getTime()),\n      bufferCount(clickCount, 1),\n      filter((timestamps) => {\n        return timestamps[0] > new Date().getTime() - clickDelay;\n      }),\n    ).subscribe(() => {\n      clearInterval(intervalId);\n      setRunning(!running);\n    });\n  };\n\n  const emitWaitEvent = () => {\n    waitSubject.next(true);\n  };\n\n  useEffect(() => {\n    const timeArray: Array<number | string> = calculateTimer(timeInSeconds);\n\n    handleWaitClick();\n\n    setTimerArray(timeArray);\n  }, [timeInSeconds]);\n\n  const handleStartStopButton = () => {\n    if (!running) {\n      const interval: any = setInterval(() => {\n        setTimeInSeconds((previousState) => previousState + 1);\n      }, 1000);\n\n      setIntervalId(interval);\n    } else {\n      clearInterval(intervalId);\n      setTimeInSeconds(0);\n    }\n\n    setRunning(!running);\n  };\n\n  const handleResetButton = () => {\n    if (running) {\n      clearInterval(intervalId);\n      setTimeInSeconds(0);\n      const interval: any = setInterval(() => {\n        setTimeInSeconds((previousState) => previousState + 1);\n      }, 1000);\n\n      setIntervalId(interval);\n    }\n  };\n\n  return (\n    <>\n      <Display timerArray={timerArray} />\n      <Buttons\n        handleStartStopButton={handleStartStopButton}\n        emitWaitEvent={emitWaitEvent}\n        handleResetButton={handleResetButton}\n      />\n    </>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\nimport './App.scss';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Stopwatch from './components/Stopwatch';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"starter\">\n      <Stopwatch />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}